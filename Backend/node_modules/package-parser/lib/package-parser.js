var fs = require("fs");

var dataCache;

function getDefaultPackagePath() {
  return process.cwd() + '/package.json';
}

function getPackageJson(callback, path) {
  path = path || getDefaultPackagePath();
  if(!dataCache) {
    fs.readFile(path, 'utf8', function(data){
      dataCache = JSON.parse(data);
    });
  }
  callback(dataCache);
}

function getPackageJsonSync(path) {
  path = path || getDefaultPackagePath();
  if(!dataCache) {
    dataCache = JSON.parse(fs.readFileSync(path, 'utf8'));
  }
  return dataCache;
}

function writePackageJson(callback, path, data) {
  path = path || getDefaultPackagePath();
  data = data || dataCache;
  fs.writeFileSync(path, JSON.stringify(data, null, 4), 'utf8', callback);
}

function writePackageJsonSync(path,data) {
  path = path || getDefaultPackagePath();
  data = data || dataCache;
  return fs.writeFileSync(path, JSON.stringify(data, null, 4), 'utf8');
}

function addElement(key, value, path) {
  getPackageJsonSync(path);
  dataCache[key] = value;
  return dataCache;
}

function setNestedValue(key, value, subkeys, obj) {
  var keyName = subkeys.shift();
  obj[keyName] = obj[keyName] || {};
  if(subkeys.length>0) {
    obj[keyName] = setNestedValue(key, value, subkeys, obj[keyName]);
  } else {
    obj[keyName][key] = value;
  }

  return obj;
}

function addElementToSubkey(key, value, subkey, path) {
  getPackageJsonSync(path);
  if(!subkey) throw Error('subkey not set');
  var subkeys = subkey.split('.');
  dataCache = setNestedValue(key, value, subkeys, dataCache);
  return dataCache;
}

module.exports = {
  getPackageJson: getPackageJson,
  getPackageJsonSync: getPackageJsonSync,
  writePackageJson: writePackageJson,
  writePackageJsonSync: writePackageJsonSync,
  addElement: function(key, value, path) {
    addElement(key, value, path);
    return this;
  },
  addElementToSubkey: function(key, value, subkey, path){
    addElementToSubkey(key, value, subkey, path);
    return this;
  }
};
